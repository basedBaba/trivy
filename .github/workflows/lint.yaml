name: 'Keploy TestGPT'
on:
  push:
    branches:
      - main
description: "TestGPT is a GitHub Action designed to execute Keploy test cases and generate detailed test reports."
author: Sonichigo
branding:
  icon: 'aperture'
  color: 'orange'

inputs:
  working-directory:
    description: Relative path under $GITHUB_WORKSPACE where the repository was checked out
    required: true
  command:
    description: Command to run the application
    required: true
  keploy-path:
    description: Path to keploy
    required: true
    default: ./
  delay:
    description: Time to start application
    required: true
    default: 10
  container-name:
    description: Name of the container in case of "docker compose" command
  build-delay:
    description: Time to wait for docker container build
    default: 50s

runs:
  using: "composite"
  steps:
    - name: Fetch PR changes
      id: pr-files
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          try {
            const response = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            return response.data.map(file => file.filename);
          } catch (error) {
            core.setFailed(`Failed to fetch PR files: ${error.message}`);
          }

    - name: Detect languages
      id: language-detection
      shell: bash
      run: |
        declare -A extensions=(
          ["go"]="go"
          ["js"]="javascript"
          ["ts"]="javascript" 
          ["py"]="python"
          ["java"]="java"
        )
        
        LANGUAGES=""
        for file in ${{ steps.pr-files.outputs.result }}; do
          ext="${file##*.}"
          if [[ -n "${extensions[$ext]}" ]]; then
            LANGUAGES+="${extensions[$ext]} "
          fi
        done
        
        UNIQUE_LANGS=$(echo "$LANGUAGES" | tr ' ' '\n' | sort -u | tr '\n' ' ')
        echo "languages=$UNIQUE_LANGS" >> $GITHUB_OUTPUT

    - name: Install analysis tools
      shell: bash
      run: |
        for lang in ${{ steps.language-detection.outputs.languages }}; do
          case "$lang" in
            go)
              curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s
              go install github.com/securego/gosec/v2/cmd/gosec@latest
              ;;
            javascript)
              npm install -g eslint
              ;;
            python)
              pip install flake8 bandit
              ;;
          esac
        done
    - name: Run code analysis
      shell: bash
      run: |
        cd ${{ inputs.working-directory }}
        mkdir -p analysis-reports
        
        for lang in ${{ steps.language-detection.outputs.languages }}; do
          case "$lang" in
            go)
              golangci-lint run --out-format=github-actions ./... > analysis-reports/go-lint.txt
              gosec ./... > analysis-reports/go-security.txt
              ;;
            javascript)
              eslint . --format junit -o analysis-reports/js-lint.xml
              ;;
            python)
              flake8 . --output-file=analysis-reports/py-lint.txt
              bandit -r . -f txt -o analysis-reports/py-security.txt
              ;;
          esac
        done
    - name: Check if report is generated
      run: |
        if [ -s ${GITHUB_WORKSPACE}/${WORKDIR}/final.out ]; then
          echo "Report generated successfully."
        else
          echo "Error: Report not generated." >&2
          exit 1
        fi
      shell: bash
    - name: Comment on PR
      if: success()
      uses: actions/github-script@v6
      env:
        KEPLOY_REPORT: ${{ steps.keploy-test-report.outputs.KEPLOY_REPORT }}
      with:
        github-token: ${{ github.token }}
        script: |
          if (!process.env.KEPLOY_REPORT) {
            console.error('Error: KEPLOY_REPORT not found.');
            process.exit(1);
          }
          const fs = require('fs');
          const path = require('path');
          
          function readReport(filepath) {
            try {
              return fs.readFileSync(filepath, 'utf8');
            } catch (error) {
              return null;
            }
          }
          
          const reportsDir = path.join('${{ inputs.working-directory }}', 'analysis-reports');
          const reports = fs.readdirSync(reportsDir)
            .filter(file => file.endsWith('.txt') || file.endsWith('.xml'))
            .map(file => readReport(path.join(reportsDir, file)))
            .filter(Boolean);
          
          const summary = `## ðŸ“Š TestGPT Analysis Report
          
          ${process.env.KEPLOY_REPORT || 'No test results available'}
          
          ${reports.join('\n\n')}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          })
