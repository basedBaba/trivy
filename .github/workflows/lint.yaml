name: Keploy TestGPT Workflow

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  keploy-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment variables
        run: echo "WORKDIR=${{ github.workspace }}/${{ inputs.working-directory }}" >> $GITHUB_ENV

      - name: Detect languages
        id: language-detection
        shell: bash
        run: |
          declare -A extensions=(
            ["go"]="go"
            ["js"]="javascript"
            ["ts"]="javascript" 
            ["py"]="python"
            ["java"]="java"
          )

          LANGUAGES=""
          for file in $(git diff --name-only ${{ github.event.before }} ${{ github.sha }}); do
            ext="${file##*.}"
            if [[ -n "${extensions[$ext]}" ]]; then
              LANGUAGES+="${extensions[$ext]} "
            fi
          done

          UNIQUE_LANGS=$(echo "$LANGUAGES" | tr ' ' '\n' | sort -u | tr '\n' ' ')
          echo "languages=$UNIQUE_LANGS" >> $GITHUB_ENV

      - name: Install analysis tools
        shell: bash
        run: |
          for lang in ${{ env.languages }}; do
            case "$lang" in
              go)
                curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s
                go install github.com/securego/gosec/v2/cmd/gosec@latest
                ;;
              javascript)
                npm install -g eslint
                ;;
              python)
                pip install flake8 bandit
                ;;
            esac
          done

      - name: Run code analysis
        shell: bash
        run: |
          mkdir -p analysis-reports
          cd $WORKDIR

          for lang in ${{ env.languages }}; do
            case "$lang" in
              go)
                golangci-lint run --out-format=github-actions ./... > analysis-reports/go-lint.txt
                gosec ./... > analysis-reports/go-security.txt
                ;;
              javascript)
                eslint . --format junit -o analysis-reports/js-lint.xml
                ;;
              python)
                flake8 . --output-file=analysis-reports/py-lint.txt
                bandit -r . -f txt -o analysis-reports/py-security.txt
                ;;
            esac
          done

      - name: Run Keploy tests
        id: keploy-test
        shell: bash
        run: |
          chmod +x ${GITHUB_WORKSPACE}/install.sh
          ${GITHUB_WORKSPACE}/install.sh > report.txt
          cat report.txt

          # Extract test summary
          grep -oE "COMPLETE TESTRUN SUMMARY\.\s+Total tests: [0-9]+" report.txt | sed -r "s/\x1B\[[0-9;]*[mGK]//g" > final_total_tests.out
          grep -oE "COMPLETE TESTRUN SUMMARY\.\s+Total test passed: [0-9]+" report.txt | sed -r "s/\x1B\[[0-9;]*[mGK]//g" > final_total_passed.out
          grep -oE "COMPLETE TESTRUN SUMMARY\.\s+Total test failed: [0-9]+" report.txt | sed -r "s/\x1B\[[0-9;]*[mGK]//g" > final_total_failed.out

          cat final_total_tests.out final_total_passed.out final_total_failed.out > final.out
          echo 'KEPLOY_REPORT<<EOF' >> $GITHUB_ENV
          cat final.out >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Check if report is generated
        run: |
          if [ -s final.out ]; then
            echo "Report generated successfully."
          else
            echo "Error: Report not generated." >&2
            exit 1
          fi
        shell: bash

      - name: Comment on PR with Keploy Report
        if: success()
        uses: actions/github-script@v6
        env:
          KEPLOY_REPORT: ${{ env.KEPLOY_REPORT }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if (!process.env.KEPLOY_REPORT) {
              console.error('Error: KEPLOY_REPORT not found.');
              process.exit(1);
            }

            const summary = `## ðŸ“Š TestGPT Analysis Report\n\n${process.env.KEPLOY_REPORT || 'No test results available'}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
